/**
 * Vers√£o de diagn√≥stico da verifica√ß√£o de migra√ß√£o
 * Para investigar problemas de detec√ß√£o de dados legados
 */

import { collection, getDocs, query, where } from 'firebase/firestore';
import { db } from '../services/firebase';

export const diagnoseLegacyData = async (userId) => {
  if (!userId) {
    console.error('‚ùå UserId √© obrigat√≥rio');
    return null;
  }

  console.log(`\nüîç DIAGN√ìSTICO DETALHADO - Usu√°rio: ${userId}`);
  console.log('===============================================');

  const results = {
    userId,
    timestamp: new Date().toISOString(),
    collections: {}
  };

  // 1. Verificar cole√ß√£o transactions (legada)
  console.log('\n1Ô∏è‚É£ Verificando cole√ß√£o LEGADA: /transactions');
  try {
    const legacyRef = collection(db, 'transactions');
    console.log('   üìÇ Refer√™ncia criada:', legacyRef.path);
    
    // Primeiro, tentar buscar TODAS as transa√ß√µes (sem filtro)
    console.log('   üîç Buscando TODAS as transa√ß√µes...');
    const allSnapshot = await getDocs(legacyRef);
    console.log(`   üì¶ Total de documentos na cole√ß√£o: ${allSnapshot.size}`);
    
    if (allSnapshot.size > 0) {
      const allDocs = [];
      allSnapshot.forEach(doc => {
        allDocs.push({ id: doc.id, ...doc.data() });
      });
      
      console.log('   üìÑ Campos √∫nicos encontrados:');
      const allFields = new Set();
      allDocs.forEach(doc => {
        Object.keys(doc).forEach(field => allFields.add(field));
      });
      console.log('   ', Array.from(allFields).sort());
      
      console.log('   üë• UserIds √∫nicos encontrados:');
      const userIds = new Set();
      allDocs.forEach(doc => {
        if (doc.userId) userIds.add(doc.userId);
        if (doc.uid) userIds.add(doc.uid);
        if (doc.user) userIds.add(doc.user);
      });
      console.log('   ', Array.from(userIds));
      
      console.log(`   üéØ Procurando especificamente por userId: ${userId}`);
      const userTransactions = allDocs.filter(doc => 
        doc.userId === userId || doc.uid === userId || doc.user === userId
      );
      console.log(`   üì¶ Transa√ß√µes do usu√°rio: ${userTransactions.length}`);
      
      if (userTransactions.length > 0) {
        console.log('   üìÑ Primeira transa√ß√£o do usu√°rio:');
        console.table(userTransactions[0]);
      }
      
      results.collections.legacy = {
        total: allSnapshot.size,
        userTransactions: userTransactions.length,
        sample: userTransactions[0] || null,
        allUserIds: Array.from(userIds)
      };
    } else {
      console.log('   ‚ÑπÔ∏è Cole√ß√£o est√° vazia');
      results.collections.legacy = { total: 0, userTransactions: 0 };
    }
    
    // Agora tentar com query filtrada
    console.log('\n   üîç Testando query filtrada...');
    const q = query(legacyRef, where('userId', '==', userId));
    const filteredSnapshot = await getDocs(q);
    console.log(`   üì¶ Resultado da query filtrada: ${filteredSnapshot.size} documentos`);
    
    results.collections.legacy.queryFiltered = filteredSnapshot.size;
    
  } catch (error) {
    console.error('   ‚ùå Erro ao verificar cole√ß√£o legada:', error);
    results.collections.legacy = { error: error.message };
  }

  // 2. Verificar cole√ß√£o nova
  console.log('\n2Ô∏è‚É£ Verificando cole√ß√£o NOVA: /users/{userId}/transactions');
  try {
    const newRef = collection(db, 'users', userId, 'transactions');
    console.log('   üìÇ Refer√™ncia criada:', newRef.path);
    
    const newSnapshot = await getDocs(newRef);
    console.log(`   üì¶ Total de documentos: ${newSnapshot.size}`);
    
    const newTransactions = [];
    newSnapshot.forEach(doc => {
      newTransactions.push({ id: doc.id, ...doc.data() });
    });
    
    results.collections.new = {
      total: newSnapshot.size,
      sample: newTransactions[0] || null
    };
    
    if (newTransactions.length > 0) {
      console.log('   üìÑ Primeira transa√ß√£o:');
      console.table(newTransactions[0]);
    }
    
  } catch (error) {
    console.error('   ‚ùå Erro ao verificar cole√ß√£o nova:', error);
    results.collections.new = { error: error.message };
  }

  // 3. Verificar status de migra√ß√£o
  console.log('\n3Ô∏è‚É£ Verificando status de migra√ß√£o');
  const migrationFlag = localStorage.getItem(`migrated_${userId}`);
  console.log(`   üè∑Ô∏è Flag de migra√ß√£o: ${migrationFlag}`);
  results.migrationStatus = migrationFlag;

  // 4. Resumo final
  console.log('\nüìä RESUMO:');
  console.table({
    'Transa√ß√µes Legadas (total)': results.collections.legacy?.total || 0,
    'Transa√ß√µes Legadas (usu√°rio)': results.collections.legacy?.userTransactions || 0,
    'Transa√ß√µes Legadas (query)': results.collections.legacy?.queryFiltered || 0,
    'Transa√ß√µes Novas': results.collections.new?.total || 0,
    'Status Migra√ß√£o': migrationFlag || 'n√£o definido'
  });

  return results;
};

// Expor globalmente
window.diagnoseLegacyData = diagnoseLegacyData;

console.log('üî¨ Diagn√≥stico de dados legados carregado. Use: diagnoseLegacyData(userId)');
